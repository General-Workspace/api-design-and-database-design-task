openapi: 3.0.0
info:
  title: API Design Task
  description: Group task for API Design in the HNG internship
  version: 1.0.0
servers:
  - url: https://api-design-hng-0eff3e6208d2.herokuapp.com/api-docs/
    description: Prod Documentation
  - url: http://localhost:1234
    description: Local Server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Authentication:
      type: object
      required:
        - firstName
        - lastName
        - email
        - password
        - role

      properties:
        firstName:
          type: string
          example: Jane
        lastName:
          type: string
          example: Doe
        email:
          type: string
          format: email
          example: jane@example.com
        password:
          type: string
          example: password
        role:
          type: string
          enum:
            - user
            - admin
          example: user
        inviteCode:
          type: string
          example: abcdef1234567890


    Messaging:
      type: object
      required:
        - subject
        - body
        - recipient

      properties:
        subject:
          type: string
          example: Hello
        body:
          type: string
          example: Hello, World!
        recipient:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                example: 123e4567-e89b-12d3-a456-426614174000
              email:
                type: string
                format: email
                example: jane@test.com

    Notification:
      type: object
      required:
        - type
        - message
        - recipient

      properties:
        type:
          type: string
          example: push_notification
        title:
          type: string
          example: New Message
        message:
          type: string
          example: You have a new message
        recipient:
          type: string
          example: jane@example.com
        status:
          type: string
          enum:
            - failed
            - sent
            - pending
          example: pending
          default: pending
        createdAt:
          type: string
          format: date-time
          example: 2021-08-01T12:00:00Z

    Payments:
      type: object
      required:
        - amount
        - currency
        - cardNumber
        - expiryDate
        - cvv

      properties:
        amount:
          type: number
          example: 1000
        currency:
          type: string
          example: NGN
        cardNumber:
          type: string
          example: 1234 5678 9101 1121
        expiryDate:
          type: string
          example: 12/23
        cvv:
          type: string
          example: 123

    Organisations:
      type: object
      required:
        - name
        - description

      properties:
        name:
          type: string
          example: HNG
        description:
          type: string
          example: We are a tech company

    BlogPost:
      type: object
      required:
        - title
        - content

      properties:
        title:
          type: string
          example: My First Blog Post
        content:
          type: string
          example: This is the content of my first blog post.
        author:
          type: string
          example: jane@example.com
        createdAt:
          type: string
          format: date-time
          example: 2021-08-01T12:00:00Z

    EmailTemplate:
      type: object
      required:
        - name
        - subject
        - body

      properties:
        name:
          type: string
          example: Welcome Email
        subject:
          type: string
          example: Welcome to Our Platform
        body:
          type: string
          example: <h1>Hello, Welcome!</h1>
        createdAt:
          type: string
          format: date-time
          example: 2021-08-01T12:00:00Z

    Waitlist:
      type: object
      required:
        - firstName
        - email
      properties:
        firstName:
          type: string
          example: Jane
        email:
          type: string
          format: email
          example: jane@example.com

    InviteLink:
      type: object
      required:
        - inviterId
        - inviteToken
        - status
      properties:
        inviterId:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
        inviteToken:
          type: string
          example: abcdef1234567890
        status:
          type: string
          enum:
            - failed
            - sent
            - pending
          default: pending
          example: pending
        createdAt:
          type: string
          format: date-time
          example: 2021-08-01T12:00:00Z

    UserConsent:
      type: object
      required:
        - userId
        - consentGiven
        - cookieTypesAccepted
      properties:
        userId:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
        consentGiven:
          type: boolean
          example: true
        cookieTypesAccepted:
          type: array
          items:
            type: string
            enum:
              - functional
              - performance
              - targeting
              - analytics
              - advertising

    Marketing:
      type: object
      required:
        - product
        - company
        - email
        - phone
      properties:
        product:
          type: string
          example: HNG Internship
        company:
          type: string
          example: HNG Tech
        email:
          type: string
          format: email
          example: janedoe@test.com
        phone:
          type: string
          example: 1234567890

    LanguageAndRegion:
      type: object
      required:
        - language
        - region
      properties:
        language:
          type: string
          example: English
        region:
          type: string
          example: Nigeria

paths:
  # Authentication API
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Authentication"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User created successfully
                  payload:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 123e4567-e89b-12d3-a456-426614174000
                      firstName:
                        type: string
                        example: Jane
                      lastName:
                        type: string
                        example: Doe
                      email:
                        type: string
                        format: email
                        example: john@example.com
                      role:
                        type: string
                        example: user
                      createdAt:
                        type: string
                        format: date-time
                        example: 2021-08-01T12:00:00Z
                      updatedAt:
                        type: string
                        format: date-time
                        example: 2021-08-01T12:00:00Z
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email already exists
        "400":
          description: Bad request (missing fields)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Field cannot be empty
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

  /auth/login:
    post:
      summary: Login user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: jane@test.com
                password:
                  type: string
                  example: password
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successful
                  payload:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 123e4567-e89b-12d3-a456-426614174000
                      firstName:
                        type: string
                        example: Jane
                      lastName:
                        type: string
                        example: Doe
                      email:
                        type: string
                        format: email
                        example: jane@test.com
                      role:
                        type: string
                        example: user
                      createdAt:
                        type: string
                        format: date-time
                        example: 2021-08-01T12:00:00Z
                      updatedAt:
                        type: string
                        format: date-time
                        example: 2021-08-01T12:00:00Z
        "400":
          description: Bad request (missing fields)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Field cannot be empty
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid email or password
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

  /auth/google/callback:
    post:
      summary: Exchange Google OAuth code for access token and login user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  example: <Google OAuth code>
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successful
                  payload:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 123e4567-e89b-12d3-a456-426614174000
                      firstName:
                        type: string
                        example: Jane
                      lastName:
                        type: string
                        example: Doe
                      email:
                        type: string
                        format: email
                        example: jane@test.com
                      role:
                        type: string
                        example: user
                      createdAt:
                        type: string
                        format: date-time
                        example: 2021-08-01T12:00:00Z
                      updatedAt:
                        type: string
                        format: date-time
                        example: 2021-08-01T12:00:00Z
        "400":
          description: Bad request (missing fields or invalid code)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid OAuth code
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

  /auth/change-password:
    put:
      summary: Change user password
      tags:
        - Authentication
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                  example: password
                newPassword:
                  type: string
                  example: newpassword
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password changed successfully
        "400":
          description: Bad request (missing fields)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Field cannot be empty
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

  /auth/forgot-password:
    post:
      summary: Forgot password
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: jane@test.com
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password reset link sent to email
        "400":
          description: Bad request (missing fields)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Field cannot be empty
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

  /auth/resend-verification:
    post:
      summary: Resend verification email
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: janedoe@test.com
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Verification email sent successfully
        "400":
          description: Bad request (missing fields)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Field cannot be empty
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

  /auth/verify-email:
    post:
      summary: Verify email
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: janedoe@test.com
                token:
                  type: string
                  example: tyebhd6t648ydv547389dhdvyuey784vb
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email verified successfully
        "400":
          description: Bad request (missing fields)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Field cannot be empty
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

  /auth/reset-password:
    post:
      summary: Reset password
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: janedoe@test.com
                token:
                  type: string
                  example: tyebhd6t648ydv547389dhdvyuey784vb
                newPassword:
                  type: string
                  example: newpassword
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password reset successfully
        "400":
          description: Bad request (missing fields)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Field cannot be empty
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

  /auth/magic-link/request:
    post:
      summary: Request magic link for login
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: jane@test.com
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Magic link sent successfully
        "400":
          description: Bad request (missing fields)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Field cannot be empty
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

  /magic-link/verify:
    post:
      summary: Verify magic link and login user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: jane@test.com
                token:
                  type: string
                  example: tyebhd6t648ydv547389dhdvyuey784vb
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successful
                  payload:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 123e4567-e89b-12d3-a456-426614174000
                      firstName:
                        type: string
                        example: Jane
                      lastName:
                        type: string
                        example: Doe
                      email:
                        type: string
                        format: email
                        example: jane@test.com
                      role:
                        type: string
                        example: user
                      createdAt:
                        type: string
                        format: date-time
                        example: 2021-08-01T12:00:00Z
                      updatedAt:
                        type: string
                        format: date-time
                        example: 2021-08-01T12:00:00Z
        "400":
          description: Bad request (missing fields)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Field cannot be empty
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

  # Messaging API
  /messaging/users:
    post:
      summary: Send message to users
      tags:
        - Messaging
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Messaging"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Message sent successfully
                  payload:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 123e4567-e89b-12d3-a456-426614174000
                      subject:
                        type: string
                        example: Hello
                      body:
                        type: string
                        example: Hello, World!
                      recipient:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              example: 123e4567-e89b-12d3-a456-426614174000
                            email:
                              type: string
                              format: email
                              example: jane@example.com
        "400":
          description: Bad request (missing fields)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Field cannot be empty
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

  # Payments API
  /payment/stripe:
    post:
      summary: Process payments via Stripe platform
      description: This endpoint processes payments using the Stripe platform.
      tags:
        - Payments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Payments"
      responses:
        "200":
          description: Payment processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  paymentId:
                    type: string
                    example: pi_1F6G8L2eZvKYlo2Cl1L8g5C7
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Invalid payment details
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Internal Server Error

  /payment/flutterwave:
    post:
      summary: Process payments via Flutterwave platform
      description: This endpoint processes payments using the Flutterwave platform.
      tags:
        - Payments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Payments"
      responses:
        "200":
          description: Payment processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  paymentId:
                    type: string
                    example: FLW-MOCK-6d63e4bd810c0132024d5afbe7b0ad1d
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Invalid payment details
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Internal Server Error

  # Users API
  /api/{orgId}/user:
    post:
      summary: Add a user to an organisation
      tags:
        - User
      security:
        - bearerAuth: []
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
          description: ID of the organisation to add user to
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Authentication"
      responses:
        "200":
          description: User added to organisation successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User added to organisation successfully
        "400":
          description: Bad request (missing fields)
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Field cannot be empty
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Organisation not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Internal Server Error
  /api/user/{userId}:
    get:
      summary: Get a single user by ID
      tags:
        - User
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: ID of the user to get
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Authentication"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: User not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Internal Server Error

    put:
      summary: Update a user by ID
      tags:
        - User
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: ID of the user to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Authentication"
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User updated successfully
        "400":
          description: Bad request (missing fields)
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Field cannot be empty
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: User not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Internal Server Error

    delete:
      summary: Delete a user by ID
      tags:
        - User
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the user to delete
      responses:
        "200":
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User deleted successfully
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: User not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Internal Server Error

  # Organisations API
  /api/organisations:
    get:
      summary: Get all organisations
      tags:
        - Organisations
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Organisations"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Unauthorized
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Internal Server Error
  /api/organisation:
    post:
      summary: Create a new organisation
      tags:
        - Organisations
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Organisations"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Organisation created successfully
        "400":
          description: Bad request (missing fields)
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Field cannot be empty
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Unauthorized
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Internal Server Error

  /api/organisation/{orgId}:
    put:
      summary: Update an organisation by ID
      tags:
        - Organisations
      security:
        - bearerAuth: []
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
          description: ID of the organisation to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Organisations"
      responses:
        "200":
          description: Organisation updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Organisation updated successfully
        "400":
          description: Bad request (missing fields)
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Field cannot be empty
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Organisation not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Internal Server Error

    delete:
      summary: Delete an organisation by ID
      tags:
        - Organisations
      security:
        - bearerAuth: []
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
          description: ID of the organisation to delete
      responses:
        "200":
          description: Organisation deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Organisation deleted successfully
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Organisation not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Internal Server Error

  # Super Admin API
  /admin/users:
    get:
      summary: Admin views all the users on the platform
      tags:
        - Admin
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Authentication"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Unauthorized
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Internal Server Error

  /admin/users/{userId}:
    get:
      summary: Admin gets a single user by ID
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: ID of the user to get
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Authentication"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: User not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Internal Server Error

  /admin/organisations:
    get:
      summary: Admin gets all the organisations on the platform
      tags:
        - Admin
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Organisations"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Unauthorized
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Internal Server Error

  /admin/organisations/{orgId}:
    get:
      summary: Admin gets a single organisation by that organisation Id
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
          description: ID of the organisation to get
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organisations"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Organisation not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Internal Server Error

  /admin/payments:
    get:
      summary: Super Admin gets a list of all payments
      tags:
        - Super Admin
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Payments"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Unauthorized
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Internal Server Error

  /admin/{userId}/make-admin:
    post:
      summary: Super Admin makes another user an admin
      tags:
        - Super Admin
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: ID of the user to make admin
      responses:
        "200":
          description: User updated to admin successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User updated to admin successfully
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Unauthorized
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: User not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Internal Server Error

  # Blog API
  /blog:
    post:
      summary: Create a new blog post
      tags:
        - Blog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BlogPost"
      responses:
        "201":
          description: Blog post created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Blog post created successfully
                  payload:
                    $ref: "#/components/schemas/BlogPost"
        "400":
          description: Bad request (missing fields)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Field cannot be empty
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

    get:
      summary: Get all blog posts
      tags:
        - Blog
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BlogPost"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

  /blog/{postId}:
    get:
      summary: Get a blog post by ID
      tags:
        - Blog
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
          description: ID of the blog post to get
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlogPost"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Blog post not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

    put:
      summary: Update a blog post by ID
      tags:
        - Blog
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
          description: ID of the blog post to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BlogPost"
      responses:
        "200":
          description: Blog post updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Blog post updated successfully
                  payload:
                    $ref: "#/components/schemas/BlogPost"
        "400":
          description: Bad request (missing fields)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Field cannot be empty
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Blog post not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

    delete:
      summary: Delete a blog post by ID
      tags:
        - Blog
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
          description: ID of the blog post to delete
      responses:
        "200":
          description: Blog post deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Blog post deleted successfully
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Blog post not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

  /blog/author/{author}:
    get:
      summary: Get blog posts by author
      tags:
        - Blog
      parameters:
        - name: author
          in: path
          required: true
          schema:
            type: string
          description: Name of the author
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BlogPost"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Blog posts not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

  /blog/timerange:
    get:
      summary: Get blog posts within a time range
      tags:
        - Blog
      parameters:
        - name: startDate
          in: query
          required: true
          schema:
            type: string
            format: date-time
          description: Start date of the time range
        - name: endDate
          in: query
          required: true
          schema:
            type: string
            format: date-time
          description: End date of the time range
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BlogPost"
        "400":
          description: Bad request (invalid date format)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid date format
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Blog posts not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

  # Email Template API
  /email-templates:
    post:
      summary: Create a new email template
      tags:
        - Email Templates
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailTemplate"
      responses:
        "201":
          description: Email template created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email template created successfully
                  payload:
                    $ref: "#/components/schemas/EmailTemplate"
        "400":
          description: Bad request (missing fields)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Field cannot be empty
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

    get:
      summary: Get all email templates
      tags:
        - Email Templates
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EmailTemplate"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

  /email-templates/{templateId}:
    get:
      summary: Get an email template by ID
      tags:
        - Email Templates
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            type: string
          description: ID of the email template to get
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmailTemplate"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email template not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

    put:
      summary: Update an email template by ID
      tags:
        - Email Templates
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            type: string
          description: ID of the email template to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailTemplate"
      responses:
        "200":
          description: Email template updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email template updated successfully
                  payload:
                    $ref: "#/components/schemas/EmailTemplate"
        "400":
          description: Bad request (missing fields)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Field cannot be empty
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email template not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

    delete:
      summary: Delete an email template by ID
      tags:
        - Email Templates
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            type: string
          description: ID of the email template to delete
      responses:
        "200":
          description: Email template deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email template deleted successfully
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email template not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

  # Notifications API
  /notifications:
    post:
      summary: Create a new notification
      tags:
        - Notification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Notification"
      responses:
        "201":
          description: Notification created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Notification created successfully
                  payload:
                    $ref: "#/components/schemas/Notification"
        "400":
          description: Bad request (missing fields)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Field cannot be empty
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

  /notifications/{notificationId}:
    get:
      summary: Get a notification by ID
      tags:
        - Notification
      parameters:
        - name: notificationId
          in: path
          required: true
          schema:
            type: string
          description: ID of the notification to get
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notification"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Notification not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

    delete:
      summary: Delete a notification by ID
      tags:
        - Notification
      parameters:
        - name: notificationId
          in: path
          required: true
          schema:
            type: string
          description: ID of the notification to delete
      responses:
        "200":
          description: Notification deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Notification deleted successfully
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Notification not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

  /notifications/{notificationId}/status:
    patch:
      summary: Update the status of a notification by ID
      tags:
        - Notification
      parameters:
        - name: notificationId
          in: path
          required: true
          schema:
            type: string
          description: ID of the notification to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum:
                    - failed
                    - sent
                    - pending
                  example: sent
      responses:
        "200":
          description: Status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Notification status updated successfully
                  payload:
                    $ref: "#/components/schemas/Notification"
        "400":
          description: Bad request (invalid status value)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid status value
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Notification not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

  # Waitlist API
  /waitlist:
    post:
      summary: Add a user to the waitlist
      tags:
        - Waitlist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Waitlist"
      responses:
        "201":
          description: User added to the waitlist successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User added to the waitlist successfully
                  payload:
                    $ref: "#/components/schemas/Waitlist"
        "409":
          description: Conflict (user already in waitlist)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User already in waitlist
        "400":
          description: Bad request (missing fields)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Field cannot be empty
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

    get:
      summary: Get all users in the waitlist
      tags:
        - Waitlist
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Waitlist"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

  /waitlist/{userId}:
    get:
      summary: Get a user in the waitlist by ID
      tags:
        - Waitlist
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: ID of the user to get
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Waitlist"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

    delete:
      summary: Remove a user from the waitlist by ID
      tags:
        - Waitlist
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: ID of the user to remove
      responses:
        "200":
          description: User removed from the waitlist successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User removed from the waitlist successfully
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

  # Invite Link Flow
  /invite:
    post:
      summary: Generate a new invite link
      tags:
        - Invite
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InviteLink"
      responses:
        "201":
          description: Invite link generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invite link generated successfully
                  payload:
                    $ref: "#/components/schemas/InviteLink"
        "400":
          description: Bad request (missing fields)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Field cannot be empty
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

    get:
      summary: Get all invite links
      tags:
        - Invite
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/InviteLink"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

  /invite/{inviteId}:
    get:
      summary: Get an invite link by ID
      tags:
        - Invite
      parameters:
        - name: inviteId
          in: path
          required: true
          schema:
            type: string
          description: ID of the invite link to get
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InviteLink"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invite link not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

    delete:
      summary: Delete an invite link by ID
      tags:
        - Invite
      parameters:
        - name: inviteId
          in: path
          required: true
          schema:
            type: string
          description: ID of the invite link to delete
      responses:
        "200":
          description: Invite link deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invite link deleted successfully
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invite link not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

  # GPDR and Cookies
  /cookie-consent:
    post:
      summary: Record user consent for cookie usage
      tags:
        - GDPR Cookies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserConsent"
      responses:
        "201":
          description: User consent recorded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User consent recorded successfully
                  consentRecord:
                    $ref: "#/components/schemas/UserConsent"
        "400":
          description: Bad request (missing fields)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Missing required fields
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

  # Marketing
  /api/marketing:
    post:
      summary: Create a new marketing campaign
      tags:
        - Marketing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Marketing"
      responses:
        "201":
          description: Marketing campaign successfully added
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Marketing campaign created successfully
                  payload:
                    $ref: "#/components/schemas/Marketing"
        "400":
          description: Bad request (missing fields)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Field cannot be empty
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

    get:
      summary: Get all marketing campaigns
      tags:
        - Marketing
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Marketing"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

  /api/marketing/{campaignId}:
    get:
      summary: Get a single marketing campaign by ID
      tags:
        - Marketing
      parameters:
        - name: campaignId
          in: path
          required: true
          schema:
            type: string
          description: ID of the marketing campaign to get
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Marketing"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Marketing campaign not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

    put:
      summary: Update contents of a marketing campaign by ID
      tags:
        - Marketing
      parameters:
        - name: campaignId
          in: path
          required: true
          schema:
            type: string
          description: ID of the marketing campaign to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Marketing"
      responses:
        "200":
          description: Marketing campaign updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Marketing campaign updated successfully
                  payload:
                    $ref: "#/components/schemas/Marketing"
        "400":
          description: Bad request (missing fields)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Field cannot be empty
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Marketing campaign not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

    delete:
      summary: Delete a marketing campaign by ID
      tags:
        - Marketing
      parameters:
        - name: campaignId
          in: path
          required: true
          schema:
            type: string
          description: ID of the marketing campaign to delete
      responses:
        "200":
          description: Marketing campaign deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Marketing campaign deleted successfully
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Marketing campaign not found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

  # Settings and Profile
  /settings:
    get:
      summary: Get user settings
      tags:
        - Settings
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                    example: 123e4567-e89b-12d3-a456-426614174000
                  emailNotifications:
                    type: boolean
                    example: true
                  smsNotifications:
                    type: boolean
                    example: false
                  theme:
                    type: string
                    example: dark
                  language:
                    type: string
                    example: en-US
                  timezone:
                    type: string
                    example: America/New_York
                  createdAt:
                    type: string
                    format: date-time
                    example: 2021-08-01T12:00:00Z
                  updatedAt:
                    type: string
                    format: date-time
                    example: 2021-08-01T12:00:00Z
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

  /settings/profile:
    get:
      summary: Get user profile settings
      tags:
        - Profile Settings
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                    example: 123e4567-e89b-12d3-a456-426614174000
                  firstName:
                    type: string
                    example: Jane
                  lastName:
                    type: string
                    example: Doe
                  email:
                    type: string
                    format: email
                    example: jane@example.com
                  phoneNumber:
                    type: string
                    example: +1234567890
                  address:
                    type: object
                    properties:
                      street:
                        type: string
                        example: 123 Main St
                      city:
                        type: string
                        example: Anytown
                      state:
                        type: string
                        example: CA
                      zip:
                        type: string
                        example: 12345
                  avatarUrl:
                    type: string
                    example: https://example.com/avatar.jpg
                  createdAt:
                    type: string
                    format: date-time
                    example: 2021-08-01T12:00:00Z
                  updatedAt:
                    type: string
                    format: date-time
                    example: 2021-08-01T12:00:00Z
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error
  # Language and Region
  /settings/language:
    post:
      summary: User sets their language preference
      tags:
        - Language and Region
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                language:
                  type: string
                  example: en-US
      responses:
        "200":
          description: Language preference set successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Language preference set successfully
        "400":
          description: Bad request (invalid language value)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid language value

    get:
      summary: Fetch user language preference
      tags:
        - Language and Region
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Language preference fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  language:
                    type: string
                    example: en-US
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: An error occurred while fetching language preference

    put:
      summary: Update user language preference
      tags:
        - Language and Region
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                language:
                  type: string
                  example: en-US
      responses:
        "200":
          description: Language preference updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Language preference updated successfully
        "400":
          description: Bad request (invalid language value)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid language value
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: An error occurred while updating language preference

  /settings/region:
    post:
      summary: User sets their region preference
      tags:
        - Language and Region
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                region:
                  type: string
                  example: US
      responses:
        "200":
          description: Region preference set successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Region preference set successfully
        "400":
          description: Bad request (invalid region value)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid region value

    get:
      summary: Fetch user region preference
      tags:
        - Language and Region
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Region preference fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  region:
                    type: string
                    example: US
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: An error occurred while fetching region preference

    put:
      summary: Update user region preference
      tags:
        - Language and Region
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                region:
                  type: string
                  example: US
      responses:
        "200":
          description: Region preference updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Region preference updated successfully
        "400":
          description: Bad request (invalid region value)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid region value
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: An error occurred while updating region preference
