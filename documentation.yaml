openapi: 3.0.0
info:
  title: API Design Task
  description: Group task for API Design in the HNG internship
  version: 1.0.0
servers:
  - url: http://localhost:3001
    description: Local Server
  - url: https://swagger-live.com
    description: Prod Documentation

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Authentication:
      type: object
      required:
        - firstName
        - lastName
        - email
        - password
        - role

      properties:
        firstName:
          type: string
          example: Jane
        lastName:
          type: string
          example: Doe
        email:
          type: string
          format: email
          example: jane@example.com
        password:
          type: string
          example: password
        role:
          type: string
          enum:
            - user
            - admin
          example: user

    Messaging:
      type: object
      required:
        - subject
        - body
        - recipient

      properties:
        subject:
          type: string
          example: Hello
        body:
          type: string
          example: Hello, World!
        recipient:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                example: 123e4567-e89b-12d3-a456-426614174000
              email:
                type: string
                format: email
                example: jane@test.com

    Payments:
      type: object
      required:
        - amount
        - currency
        - cardNumber
        - expiryDate
        - cvv

      properties:
        amount:
          type: number
          example: 1000
        currency:
          type: string
          example: NGN
        cardNumber:
          type: string
          example: 1234 5678 9101 1121
        expiryDate:
          type: string
          example: 12/23
        cvv:
          type: string
          example: 123

    Organisations:
      type: object
      required:
        - name
        - description

      properties:
        name:
          type: string
          example: HNG
        description:
          type: string
          example: We are a tech company

paths:
  # Authentication API
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Authentication"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User created successfully
                  payload:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 123e4567-e89b-12d3-a456-426614174000
                      firstName:
                        type: string
                        example: Jane
                      lastName:
                        type: string
                        example: Doe
                      email:
                        type: string
                        format: email
                        example: john@example.com
                      role:
                        type: string
                        example: user
                      createdAt:
                        type: string
                        format: date-time
                        example: 2021-08-01T12:00:00Z
                      updatedAt:
                        type: string
                        format: date-time
                        example: 2021-08-01T12:00:00Z
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email already exists
        "400":
          description: Bad request (missing fields)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Field cannot be empty
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

  /auth/login:
    post:
      summary: Login user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: jane@test.com
                password:
                  type: string
                  example: password
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successful
                  payload:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 123e4567-e89b-12d3-a456-426614174000
                      firstName:
                        type: string
                        example: Jane
                      lastName:
                        type: string
                        example: Doe
                      email:
                        type: string
                        format: email
                        example: jane@test.com
                      role:
                        type: string
                        example: user
                      createdAt:
                        type: string
                        format: date-time
                        example: 2021-08-01T12:00:00Z
                      updatedAt:
                        type: string
                        format: date-time
                        example: 2021-08-01T12:00:00Z
        "400":
          description: Bad request (missing fields)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Field cannot be empty
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid email or password
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

  # Messaging API
  /messaging/users:
    post:
      summary: Send message to users
      tags:
        - Messaging
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Messaging"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Message sent successfully
                  payload:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 123e4567-e89b-12d3-a456-426614174000
                      subject:
                        type: string
                        example: Hello
                      body:
                        type: string
                        example: Hello, World!
                      recipient:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              example: 123e4567-e89b-12d3-a456-426614174000
                            email:
                              type: string
                              format: email
                              example: jane@example.com
        "400":
          description: Bad request (missing fields)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Field cannot be empty
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthorized
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

  # Payments API
  /payment/stripe:
    post:
      summary: Process payments via Stripe platform
      description: This endpoint processes payments using the Stripe platform.
      tags:
        - Payments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Payments"
      responses:
        "200":
          description: Payment processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  paymentId:
                    type: string
                    example: pi_1F6G8L2eZvKYlo2Cl1L8g5C7
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Invalid payment details
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Internal Server Error

  /payment/flutterwave:
    post:
      summary: Process payments via Flutterwave platform
      description: This endpoint processes payments using the Flutterwave platform.
      tags:
        - Payments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Payments"
      responses:
        "200":
          description: Payment processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  paymentId:
                    type: string
                    example: FLW-MOCK-6d63e4bd810c0132024d5afbe7b0ad1d
        "400":
          description: Invalid request parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Invalid payment details
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Internal Server Error
  # Users API

  # Organisations API

  # Super Admin API
